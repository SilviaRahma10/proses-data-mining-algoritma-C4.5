# -*- coding: utf-8 -*-
"""final projek data mining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HQ8pFrrWuD865jw905azHeAa6g4K4ssA
"""

from google.colab import drive
drive.mount('/content/drive')

!ls "/content/drive/My Drive/DATASET"

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
import graphviz
import pandas as pd

#confution matrix
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

import pandas as pd
df= pd.read_csv('/content/drive/My Drive/DATASET/heart_failure_clinical_records_dataset.csv')
df

x = df. drop(columns = "DEATH_EVENT")
y = df ["DEATH_EVENT"]

tree_dataset = DecisionTreeClassifier(random_state=500, max_depth=None,
                                    min_samples_split=2,
                                    min_samples_leaf=1,
                                    min_weight_fraction_leaf=0,
                                    max_leaf_nodes=None,
                                    min_impurity_decrease=0)

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=500)
tree_dataset.fit(x_train, y_train)
print("x_train",x_train)
print("x_test",x_test)
print("y_train",y_train)
print("y_train",y_test)

y_pred = tree_dataset.predict(x_test)
cm= confusion_matrix(y_test, y_pred)
print(" confusion matrik sebagai beriku")
print(cm)
akurasi = classification_report(y_test, y_pred)
print("berikut ini kakurasi ")
print("akurasi", akurasi)
akurasi = accuracy_score(y_test,y_pred)
print("tingkat akurasi : %d persen" %( akurasi *100))

feartures =x
target= y
model=tree.DecisionTreeClassifier(random_state=0, max_depth=None,
min_samples_split=2,
min_samples_leaf=1,min_weight_fraction_leaf=0,max_leaf_nodes=None,min_impurity_decrease=0)
clf = model.fit(feartures, target)
dot_data = tree.export_graphviz(model, out_file=None,filled = True)
graph = graphviz.Source(dot_data)
graph.view()